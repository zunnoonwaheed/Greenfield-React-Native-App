### Greenfield API Test Collection
### Use with REST Client VS Code extension or copy to Postman
### Base URL: http://localhost:5000

@baseUrl = http://localhost:5000/api
@token = YOUR_JWT_TOKEN_HERE

### ============================================
### HEALTH CHECK
### ============================================

### Check server is running
GET http://localhost:5000/health
Content-Type: application/json

### Check API root
GET {{baseUrl}}
Content-Type: application/json

### ============================================
### AUTHENTICATION
### ============================================

### User Signup
POST {{baseUrl}}/auth/signup
Content-Type: application/json

{
  "name": "John Doe",
  "email": "john.doe@example.com",
  "password": "password123",
  "phone": "+923001234567"
}

### User Login
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "john.doe@example.com",
  "password": "password123"
}

### Forgot Password
POST {{baseUrl}}/auth/forgot-password
Content-Type: application/json

{
  "email": "john.doe@example.com"
}

### Reset Password
POST {{baseUrl}}/auth/reset-password
Content-Type: application/json

{
  "token": "RESET_TOKEN_FROM_EMAIL",
  "newPassword": "newpassword123"
}

### Logout
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{token}}
Content-Type: application/json

### ============================================
### USER PROFILE (Protected Routes)
### ============================================

### Get User Profile
GET {{baseUrl}}/user/profile
Authorization: Bearer {{token}}
Content-Type: application/json

### Update User Profile
PUT {{baseUrl}}/user/profile
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "John Updated",
  "phone": "+923009876543"
}

### Change Password
POST {{baseUrl}}/user/change-password
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "currentPassword": "password123",
  "newPassword": "newpassword456"
}

### Delete Account
DELETE {{baseUrl}}/user/account
Authorization: Bearer {{token}}
Content-Type: application/json

### ============================================
### LOCATION MANAGEMENT (Protected Routes)
### ============================================

### Add New Location
POST {{baseUrl}}/location/add
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "city": "Islamabad",
  "area": "DHA",
  "sector": "Phase 2",
  "streetNumber": "5",
  "propertyType": "house",
  "houseNumber": "123"
}

### Get All User Locations
GET {{baseUrl}}/location/list
Authorization: Bearer {{token}}
Content-Type: application/json

### Get Default Location
GET {{baseUrl}}/location/default
Authorization: Bearer {{token}}
Content-Type: application/json

### Set Location as Default
PUT {{baseUrl}}/location/set-default/1
Authorization: Bearer {{token}}
Content-Type: application/json

### Update Location
PUT {{baseUrl}}/location/update/1
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "city": "Islamabad",
  "area": "DHA",
  "sector": "Phase 3",
  "streetNumber": "10",
  "propertyType": "apartment",
  "houseNumber": "456"
}

### Delete Location
DELETE {{baseUrl}}/location/delete/1
Authorization: Bearer {{token}}
Content-Type: application/json

### ============================================
### TEST DATA
### ============================================

### Test with Admin Account (after running seed.js)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "admin@greenfield.com",
  "password": "admin123"
}

### Test with Customer Account (after running seed.js)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "customer@test.com",
  "password": "test123"
}

### ============================================
### ERROR TEST CASES
### ============================================

### Test Invalid Email Format
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "invalid-email",
  "password": "test123"
}

### Test Missing Required Fields
POST {{baseUrl}}/auth/signup
Content-Type: application/json

{
  "email": "test@example.com"
}

### Test Duplicate Email
POST {{baseUrl}}/auth/signup
Content-Type: application/json

{
  "name": "Test User",
  "email": "admin@greenfield.com",
  "password": "test123"
}

### Test Invalid Token
GET {{baseUrl}}/user/profile
Authorization: Bearer invalid_token_here
Content-Type: application/json

### Test Expired/Invalid Reset Token
POST {{baseUrl}}/auth/reset-password
Content-Type: application/json

{
  "token": "invalid_or_expired_token",
  "newPassword": "newpass123"
}

### ============================================
### NOTES
### ============================================

# To use these tests:
# 1. Install REST Client extension in VS Code
# 2. Replace {{token}} with actual JWT from login response
# 3. Click "Send Request" above each ### section
#
# OR
#
# Copy requests to Postman:
# 1. Create new collection
# 2. Add requests with same structure
# 3. Set environment variable for baseUrl and token
